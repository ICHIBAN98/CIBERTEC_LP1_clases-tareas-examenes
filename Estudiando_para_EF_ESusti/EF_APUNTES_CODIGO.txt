------------------------------BASE DE DATOS------------------------------
no olvides cambiar nombre de la BD
-------------------------------------------------------------------------



CREATE DATABASE dbinstitutov2;

USE dbinstitutov2;

CREATE TABLE student (
	idEstudent int NOT NULL AUTO_INCREMENT,
    name varchar(100),
    lastname varchar(100),
	code varchar(100),
    password varchar(100),
	PRIMARY KEY (idEstudent)
);

CREATE TABLE subject (
	idSubject int NOT NULL AUTO_INCREMENT,
    code varchar(100),
    name varchar(100),
    level varchar(100),
   teacher varchar(100),
   PRIMARY KEY (idSubject)
);

INSERT INTO  student  (name, lastname, code, password) values ('Naruto', 'Uzumaki', 'i201820124', '123456789');
INSERT INTO  student  (name, lastname, code, password) values ('Hinajta', 'Hiuga', 'i201820125', '123456780');
INSERT INTO  student  (name, lastname, code, password) values ('Eren', 'Jager', 'i201820121', '123456784');

INSERT INTO subject (code,name,level,teacher) VALUES ('C454','Seguridad de aplicaciones','avanzado','Juan Lopez');
INSERT INTO subject (code,name,level,teacher) VALUES ('C2626','Visual Basic','intermedio','Roberto Gomez');
INSERT INTO subject (code,name,level,teacher) VALUES ('C1515','Java','basico','Julio Alvarez');
INSERT INTO subject (code,name,level,teacher) VALUES ('C1212','Aplicaciones Móviles Android','avanzado','Jose Lopez');



-------------------------MySqlConnection----------------------------
no olvides cambiar nombre de la BD
--------------------------------------------------------------------


package util;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class MySqlConexion {
	public static Connection getConexion() {
	Connection con = null;
	 try {
		Class.forName("com.mysql.cj.jdbc.Driver").newInstance();
		String url = "jdbc:mysql://localhost/dbinstitutov2?useSSL=false&useTimezone=true&serverTimezone=UTC";
		String usr = "root";
		String psw = "mysql";
		con = DriverManager.getConnection(url,usr,psw);
	} catch (ClassNotFoundException e) {
		// TODO: handle exception
		System.out.println("Error >> Driver no Instalado!!"+e.getMessage());
	}catch (SQLException e) {
		// TODO: handle exception
		System.out.println("Error >> de conexión con la BD"+e.getMessage());
	}catch (Exception e) {
		// TODO: handle exception
		System.out.println("Error >> general: "+ e.getMessage());
	}
	 return con;
	}
}







----------------------DAO Factory (abstracto)----------------------
revisa importes por el nombre
--------------------------------------------------------------------



package dao;

import interfaces.AuthInterface;
import interfaces.SubjectInterface;

public abstract class DAOFactory {
	
	public static final int MYSQL=1;
	public static final int SQLSERVER=2;
	public static final int ORACLE=3;
	
	
	public abstract SubjectInterface getSubject();
	public abstract AuthInterface getAuth();
	
	
	public static DAOFactory getDaoFactory(int tipo) {
		switch (tipo) {
		case MYSQL:
			return new MySqlDAOFactory();
			
		case SQLSERVER:
			return null;
			
		case ORACLE:
			return null;
		default:
			return null;
		}
	}
	
}




-----------------AUTH_MODEL----------------------------------------
revisa importes por el nombre de clases
--------------------------------------------------------------------



package modelo;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import entidades.Student;
import interfaces.AuthInterface;
import util.MySqlConexion;

public class AuthModel implements AuthInterface {

	@Override
	public Student verificarInicioSesion(String codigo, String clave) {
		// TODO Auto-generated method stub
		
		Student student= null;
		PreparedStatement psmt = null;
		Connection cn = null;
		ResultSet rs = null;
		
		try {
			cn = MySqlConexion.getConexion();
			String mysql = "SELECT * FROM STUDENT WHERE CODE=? AND PASSWORD=?";
			psmt = cn.prepareStatement(mysql);
			psmt.setString(1, codigo);
			psmt.setString(2, clave);
			rs = psmt.executeQuery();
			if(rs.next()) {
				student = new Student();
				student.setName(rs.getString("name"));
				student.setLastname(rs.getString("lastname"));
				student.setCode(rs.getString("code"));
			}
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			e.printStackTrace();
			
		} finally {
			try {
				if (rs != null) rs.close();
				if (psmt != null) rs.close();
				if (cn != null) rs.close();
			} catch (Exception e) {
				// TODO: handle exception
				e.printStackTrace();
			}
		}
		return student;
	}

}




-----------------------------AUTH_SERVLET-------------------------------
revisa y corrige nombres de los JSP a los que envia o recibe info el servlet
revisa nombres de importes de clases
AHORA ANTES DE USAR EL MODELO, HAY QUE PASAR POR EL DAO
-------------------------------------------------------------------------



package servlet;

import java.io.IOException;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import dao.DAOFactory;
import entidades.Student;
import entidades.Subject;
import interfaces.AuthInterface;
import interfaces.SubjectInterface;

@WebServlet("/AuthServlet")
public class AuthServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;

	/**
	 * @see HttpServlet#service(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		String type = request.getParameter("type");
		if(type.equals("login")) {
			String code= request.getParameter("txtCode");
			String clave = request.getParameter("txtPass");
			
			DAOFactory daoFactory = DAOFactory.getDaoFactory(DAOFactory.MYSQL);
			AuthInterface dao = daoFactory.getAuth();
			
			Student student = dao.verificarInicioSesion(code, clave);
			if (student != null) {
				HttpSession session = request.getSession(true);
				String nombre= student.getName();
				String apellido=student.getLastname();
				String codigo=student.getCode();
				
				session.setAttribute("nombre", nombre);
				session.setAttribute("apellido", apellido);
				session.setAttribute("codigo", codigo);
				
				SubjectInterface subjectInterface = daoFactory.getSubject();
				List<Subject> data=subjectInterface.listSubject();
				request.setAttribute("data", data);
				request.getRequestDispatcher("listSubject.jsp").forward(request, response);
			}else {
				request.setAttribute("mensaje", "Error en usuario y/clave");
				request.getRequestDispatcher("login.jsp").forward(request, response);
			}
		}else if(type.equals("logout")) {
			HttpSession session = request.getSession(true);
			session.removeAttribute("nombre");
			session.removeAttribute("nombre");
			session.removeAttribute("nombre");
			session.invalidate();
			
			response.sendRedirect("login.jsp");
		}
		
	}


}




****************************************************************************
*********************** EXAMEN FINAL apuntes *******************************
****************************************************************************




------------------------------BASE DE DATOS------------------------------
no olvides cambiar nombre de la BD
-------------------------------------------------------------------------

drop database dbInstitutov2;
create database dbInstitutov2;

use dbInstitutov2;

create table advice(
    idAdvice int not null auto_increment,
    codeStudent varchar(100),
    codeSubject varchar(100),
    date datetime,
    primary key(idAdvice)
);

create table student(
    idStudent int not null auto_increment,
    name varchar(100),
    lastName varchar(100),
    code varchar(100),
    primary key(idStudent)
);

create table subject(
    idSubject int not null auto_increment,
    code varchar(100),
    name varchar(100),
    level varchar(100),
    teacher varchar(100),
    available int,
    primary key(idSubject)
);

INSERT INTO student VALUES (1,'Naruto','Uzumaki','i201820124'),(2,'Hinajta','Hiuga','i201820125'),(3,'Eren','Jager','i201820121');
INSERT INTO subject VALUES (1,'C454','Seguridad de aplicaciones','avanzado','Juan Lopez',10),(2,'C2626','Visual Basic','intermedio','Roberto Gomez',15),(3,'C1515','Java','basico','Julio Alvarez',20),(4,'C1212','Aplicaciones Móviles Android','avanzado','Jose Lopez',5);

Select * from advice;
Select * from student;
Select * from subject;






----------------------DAO Factory (abstracto)----------------------
revisa importes por el nombre
--------------------------------------------------------------------



package dao;

import interfaces.AdviceInterface;
import interfaces.StudentInterface;
import interfaces.SubjectInterface;

public abstract class DAOFactory {
	public static final int MYSQL = 1;
	public static final int SQLSERVER = 2;
	public static final int ORACLE = 3;
	
	//public abstract SubjectInterface getSubject();
	//public abstract ProfesoresInterface getProfesores();
	//public abstract EstudianteInterface getEstudiante();
	//public abstract AuthInterface getAuth();
	//public abstract SessionInterface getSession();
	public abstract SubjectInterface getSubject();
	public abstract StudentInterface getStudent();
	public abstract AdviceInterface getAdvice();
	
	public static DAOFactory getDaoFactory(int tipo) {
		switch (tipo) {
		case MYSQL:
			return new MySqlDAOFactory();
			
		case SQLSERVER:
			return null;
			
		case ORACLE:
			return null;
		default:
			return null;
		}
	}
}




-----------------ADVICE_MODEL----------------------------------------
revisa importes por el nombre de clases
--------------------------------------------------------------------


package modelo;

import java.sql.Connection;
import java.sql.PreparedStatement;

import entidades.Advice;
import interfaces.AdviceInterface;
import util.MySqlConexion;

public class AdviceModel implements AdviceInterface {

	@Override
	public int createAdvice(Advice advice) {
		// TODO Auto-generated method stub
		int value = 0;
		Connection cn= null;
		PreparedStatement psm=null;
		try {
			cn= MySqlConexion.getConexion();
			
			String sql="INSERT INTO Advice VALUES (null, ?,?,now())";
			psm=cn.prepareStatement(sql);
			
			psm.setString(1, advice.getCodeStudent());
			psm.setString(2, advice.getCodeSubject());
			
			value=psm.executeUpdate();
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}finally {
			try {
				if(psm !=null) psm.close();
				if(cn != null) cn.close();
			} catch (Exception e) {
				// TODO: handle exception
				e.printStackTrace();
			}
			
		}
		return 0;
	}

}







-----------------STUDENT_MODEL----------------------------------------
revisa importes por el nombre de clases
--------------------------------------------------------------------


package modelo;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

import entidades.Student;
import entidades.Subject;
import interfaces.StudentInterface;
import util.MySqlConexion;

public class StudentModel implements StudentInterface {

	@Override
	public List<Student> listStudents() {
		// TODO Auto-generated method stub
		List<Student> students = new ArrayList<Student>();
		Connection cn=null;
		PreparedStatement psm=null;
		ResultSet rs=null;
		
		try {
			cn = MySqlConexion.getConexion();
			String sql="SELECT * FROM Student";
			psm = cn.prepareStatement(sql);
			rs=psm.executeQuery();
			while (rs.next()) {
				Student student = new Student();
				student.setIdStudent(rs.getString("idStudent"));
				student.setName(rs.getString("name"));
				student.setLastName(rs.getString("lastName"));
				students.add(student);
			}
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}finally {
			try {
				if(rs != null) rs.close();
				if(psm != null) psm.close();
				if(cn != null) cn.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return students;
	}

}



-----------------SUBJECT_MODEL----------------------------------------
revisa importes por el nombre de clases
--------------------------------------------------------------------


package modelo;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

import entidades.Subject;
import interfaces.SubjectInterface;
import util.MySqlConexion;

public class SubjectModel implements SubjectInterface {

	@Override
	public List<Subject> listSubjects() {
		// TODO Auto-generated method stub
		List<Subject> listSubject = new ArrayList<Subject>();
		Connection cn=null;
		PreparedStatement psm=null;
		ResultSet rs=null;
		
		try {
			cn = MySqlConexion.getConexion();
			String sql="SELECT * FROM Subject";
			psm = cn.prepareStatement(sql);
			rs=psm.executeQuery();
			while (rs.next()) {
				Subject subj = new Subject();
				System.out.println("este es el id "+rs.getString("idSubject"));
				subj.setId(rs.getString("idSubject"));
				subj.setCode(rs.getString("code"));
				subj.setName(rs.getString("name"));
				subj.setLevel(rs.getString("level"));
				subj.setTeacher(rs.getString("teacher"));
				subj.setAvailable(rs.getInt("available"));
				listSubject.add(subj);
			}
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}finally {
			try {
				if(rs != null) rs.close();
				if(psm != null) psm.close();
				if(cn != null) cn.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return listSubject;
	}

}




-----------------SESSION_LISTENER----------------------------------------
revisa importes por el nombre de clases
PONER EN CHECK SOLAMENTE OPCIÓN ->>>>> LifeCycle
-------------------------------------------------------------------------



package listeners;

import java.util.Arrays;
import java.util.List;

import javax.servlet.annotation.WebListener;
import javax.servlet.http.HttpSessionEvent;
import javax.servlet.http.HttpSessionListener;

import dao.DAOFactory;
import entidades.Student;
import entidades.Subject;
import interfaces.StudentInterface;
import interfaces.SubjectInterface;

/**
 * Application Lifecycle Listener implementation class SessionListener
 *
 */
@WebListener
public class SessionListener implements HttpSessionListener {
	public static List<Subject> dataSubject=null;
    /**
     * Default constructor. 
     */
    public SessionListener() {
        // TODO Auto-generated constructor stub
    }

	/**
     * @see HttpSessionListener#sessionCreated(HttpSessionEvent)
     */
    public void sessionCreated(HttpSessionEvent se)  { 
         // TODO Auto-generated method stub
    	
		DAOFactory daoFactory = DAOFactory.getDaoFactory(DAOFactory.MYSQL);
		SubjectInterface dao = daoFactory.getSubject();
		StudentInterface daoStudent = daoFactory.getStudent();
		
		dataSubject = dao.listSubjects();
		List<Student> dataStudent = daoStudent.listStudents();
		
		System.out.println(dataSubject);
		se.getSession().setAttribute("listSubject", dataSubject);
		se.getSession().setAttribute("listStudent", dataStudent);
		
    }

	/**
     * @see HttpSessionListener#sessionDestroyed(HttpSessionEvent)
     */
    public void sessionDestroyed(HttpSessionEvent se)  { 
         // TODO Auto-generated method stub
    	se.getSession().invalidate();
    }
	
}






-----------------------------SUBJECT_SERVLET-------------------------------
revisa y corrige nombres de los JSP a los que envia o recibe info el servlet
revisa nombres de importes de clases
AHORA ANTES DE USAR EL MODELO, HAY QUE PASAR POR EL DAO
-------------------------------------------------------------------------


package servlet;

import java.io.IOException;
import java.util.Date;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import dao.DAOFactory;
import entidades.Advice;
import entidades.Subject;
import interfaces.AdviceInterface;
import listeners.SessionListener;
/**
 * Servlet implementation class SubjectServlet
 */
@WebServlet("/SubjectServlet")
public class SubjectServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;

	/**
	 * @see HttpServlet#service(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		String type = request.getParameter("type");
		switch (type) {
		case "list": break;
		case "register":registerAdvice(request,response); break;
		case "delete": break;
		case "edit": break;
		case "info": break;
		default:
			request.setAttribute("mensaje", "Ocurrió un problema");
			request.getRequestDispatcher("listSubject.jsp").forward(request, response);
		}
	}

	private void registerAdvice(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		//Entradas
		String codeStudent =request.getParameter("cboAlumno");
		String codeSubject =request.getParameter("cboCurso");
		
		//Procesos
		DAOFactory daoFactory = DAOFactory.getDaoFactory(DAOFactory.MYSQL);
		AdviceInterface dao = daoFactory.getAdvice();
		Advice adviceobj = new Advice();
		adviceobj.setCodeStudent(codeStudent);
		adviceobj.setCodeSubject(codeSubject);
		
		int advice  = dao.createAdvice(adviceobj);
		
		for (Subject item : SessionListener.dataSubject) {
			System.out.println("id "+ item.getId());
			System.out.println("codeSubject "+codeSubject);
			if(item.getId().equals(codeSubject)) {
				if (item.getAvailable()>0) {
					item.setAvailable((item.getAvailable())-1);
				}else {
					request.setAttribute("mensaje", "no se encuentra asesoría disponible para el curso de "+item.getName());
				}
				
			}
		}
		
		request.getRequestDispatcher("listSubject.jsp").forward(request, response);
		
	}


}





---------------------------------------------------------------------------
-----------------------------JSP_listSubject-------------------------------
---------------------------------------------------------------------------


<%@ page language="java" contentType="text/html; charset=ISO-8859-1" pageEncoding="ISO-8859-1"%>
<%@ page import="java.util.ArrayList"%>
<%@ page import="java.util.List"%>
<%@ page import="entidades.Subject"%>
<%@ page import="entidades.Student"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
<link
	href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css"
	rel="stylesheet"
	integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3"
	crossorigin="anonymous">
</head>
<body>
	<div
		class="container min-vh-100 d-flex justify-content-center align-items-center">
		<div class="row">
			<div class="col-12">
				<form action="SubjectServlet">
					<input type="hidden" name="type" value="register">
					<div class="mb-3">
						<label>Alumno</label>
						<%
						List<Student> listStudent = (List<Student>) session.getAttribute("listStudent");
						%>
						<select class="form-control" name="cboAlumno">
							<%
							if (listStudent != null) {
								for (Student item : listStudent) {
							%>
							<option value="<%=item.getIdStudent()%>">
								<%=item.getName() + " " + item.getLastname()%>
							</option>
							<%
							}
							}
							%>
						</select>

					</div>
					<div class="mb-3">
						<labeL>Curso</label>
						<%
						List<Subject> listSubject = (List<Subject>) session.getAttribute("listSubject");
						%>
						<select class="form-control" name="cboCurso">
							<%
							if (listSubject != null) {
								for (Subject item : listSubject) {
							%>
							<option value="<%=item.getId()%>">
								<%=item.getName()%>
							</option>
							<%
							}
							}
							%>
						</select>
					</div>
					<button type="submit" class="btn btn-primary">Registrar</button>
				</form>
			</div>

			<div class="col-12">
				<table class="table">
					<thead>
						<tr>
							<th>Nombre del curso</th>
							<th>Cantidad de vacantes</th>
						</tr>
					</thead>
					<tbody>
						<%
						if (listSubject != null) {
							for (Subject item : listSubject) {
						%>
						<tr>
							<td><%=item.getName()%></td>
							<td><%=item.getAvailable()%></td>
						</tr>
						<%
						}
						}
						%>
					</tbody>
				</table>
			</div>
					<%
		String mensaje = (String) request.getAttribute("mensaje");
		if (mensaje != null){
		%>
			<div class="alert alert-danger">
				<strong>Error!</strong><%=mensaje %>
			</div>
			<%
		}
			%>
		</div>
	</div>
</body>
</html>